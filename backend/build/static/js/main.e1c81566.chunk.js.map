{"version":3,"sources":["history.js","firebase/firebase.js","actions/boards.js","constants/boardsConstants.js","components/BoardForm.js","components/BoardCard.js","components/BoardsList.js","actions/auth.js","components/Header.js","components/BoardsListPage.js","components/BoardEditForm.js","components/BoardHeader.js","context/boards-context.js","components/EditNoteForm.js","actions/notes.js","constants/notesConstants.js","components/Note.js","components/NotesStack.js","context/notes-context.js","components/NotesList.js","components/BoardPage.js","components/LoginPage.js","constants/authConstants.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","reducers/auth.js","store/configureStore.js","reducers/notes.js","reducers/boards.js","serviceWorker.js","fixtures/db.js","components/LoadingPage.js","index.js"],"names":["history","createHistory","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","googleAuthProvider","GoogleAuthProvider","fetchBoardDetailsError","error","type","payload","createBoardSuccess","board","id","startCreateBoard","dispatch","getState","a","uid","auth","ref","push","boardRef","key","console","log","fetchBoardsError","message","editBoardSuccess","updates","editBoardError","deleteBoardSuccess","BoardForm","useState","boardName","setBoardName","setError","boardCreate","useSelector","state","createdBoard","boardCreateSuccess","success","useDispatch","useEffect","onSubmit","e","preventDefault","trim","name","placeholder","onChange","target","value","Board","BoardsList","boardsList","boardsListLoading","loading","boards","successCreate","once","boardsSnap","forEach","childSnapshot","val","className","length","map","to","BoardCard","startLogout","signOut","Header","displayName","photoURL","src","onClick","BoardsPage","props","BoardEditForm","BoardHeader","React","createContext","editMode","setEditMode","boardDetails","boardEdit","boardEditLoading","boardEditError","boardUpdate","exists","update","remove","orderByChild","equalTo","NoteForm","note","changeBackgroundColor","title","setTitle","body","setBody","showColorPicker","setShowColorPicker","handleClickOutsidePicker","useCallback","pickerPopover","document","getElementById","contains","addEventListener","removeEventListener","style","position","zIndex","top","right","bottom","left","colors","onChangeComplete","color","hex","createNoteBegin","createNoteSuccess","noteId","boardId","startCreateNote","newNote","noteRef","deleteNoteSuccess","editNoteSucess","startEditNote","Note","noteDelete","deleting","setDeleting","backgroundColor","setBackgroundColor","x","y","setPosition","width","size","height","setSize","flagged","setFlagged","handleDelete","bounds","cancel","minWidth","minHeight","onDragStop","d","Math","abs","handleOnDragStop","onResize","direction","offsetWidth","offsetHeight","handleOnResize","EditNoteForm","noteUpdate","aria-hidden","NoteStack","initPosition","setInitPosition","enableResizing","onDragStart","handleOnDragStart","lastY","event","NotesList","notesList","notes","NotesStack","BoardPage","match","params","boardDelete","loadingBoardDetails","currentBoard","errorBoardDetails","loadingNotes","errorNotes","successBoardDelete","boardSnapshot","startFetchBoardDetails","startFetchNotes","LoginPage","authError","signInWithPopup","PrivateRoute","Component","component","rest","isAuthenticated","PublicRoute","AppRouter","path","exact","BoardsListPage","authReducer","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","rootReducer","storage","combineReducers","filteredNotes","filter","noteCreate","noteEdit","Boolean","location","hostname","random","LoadingPage","store","createStore","applyMiddleware","thunk","jsx","hasRendered","renderApp","ReactDOM","render","onAuthStateChanged","user","pathname","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e1c81566.chunk.js","sourcesContent":["import { createBrowserHistory as createHistory } from \"history\"\n\nconst history = createHistory()\nexport default history","import * as firebase from \"firebase\"\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n}\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n// firebase.database.enableLogging(true);\n\nconst database = firebase.database()\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider()\n\nexport { firebase, googleAuthProvider, database as default }","import { SET_CURRENT_BOARD, CREATE_BOARD_BEGIN, CREATE_BOARD_SUCCESS, FETCH_BOARD_DETAILS_BEGIN, FETCH_BOARD_DETAILS_SUCCESS, FETCH_BOARD_DETAILS_ERROR, RESET_FETCH_BOARD_DETAILS, FETCH_BOARDS_BEGIN, FETCH_BOARDS_SUCCESS, FETCH_BOARDS_ERROR, EDIT_BOARD_BEGIN, EDIT_BOARD_SUCCESS, DELETE_BOARD_BEGIN, DELETE_BOARD_SUCCESS, CREATE_BOARD_ERROR, DELETE_BOARD_ERROR, RESET_DELETE_BOARD, EDIT_BOARD_ERROR, RESET_CREATE_BOARD } from \"../constants/boardsConstants\"\nimport database from \"../firebase/firebase\"\n\nexport const setCurrentBoard = (board = {}) => ({\n    type: SET_CURRENT_BOARD,\n    payload: {\n        board\n    }\n})\n\nexport const fetchBoardDetailsBegin = () => ({\n    type: FETCH_BOARD_DETAILS_BEGIN\n})\n\nexport const fetchBoardDetailsSuccess = (board) => ({\n    type: FETCH_BOARD_DETAILS_SUCCESS,\n    payload: board\n})\n\nexport const fetchBoardDetailsError = (error) => ({\n    type: FETCH_BOARD_DETAILS_ERROR,\n    payload: error\n})\n\nexport const resetFetchBoardDetails = () => ({\n    type: RESET_FETCH_BOARD_DETAILS\n})\n\nexport const startFetchBoardDetails = (boardId) => {\n    return async (dispatch, getState) => {\n        try {\n            const uid = getState().auth.uid\n            dispatch(fetchBoardDetailsBegin())\n            const boardSnapshot = await database.ref(`users/${uid}/boards/${boardId}`).once(\"value\")\n            if (boardSnapshot.exists()) {\n                dispatch(fetchBoardDetailsSuccess({\n                    id: boardSnapshot.key,\n                    ...boardSnapshot.val()\n                }))\n            } else {\n                console.log(`Board with id ${boardId} not found`)\n                dispatch(fetchBoardDetailsError(`Board with id ${boardId} not found`))\n            }\n\n        } catch (error) {\n            console.log(error)\n            dispatch(fetchBoardDetailsError(error.message))\n        }\n    }\n}\n\nexport const createBoardBegin = () => ({\n    type: CREATE_BOARD_BEGIN,\n})\n\nexport const createBoardSuccess = (board, id) => ({\n    type: CREATE_BOARD_SUCCESS,\n    payload: {\n        id,\n        ...board\n    }\n})\n\nexport const createBoardError = (error) => ({\n    type: CREATE_BOARD_ERROR,\n    payload: error\n})\n\nexport const resetCreateBoard = () => ({\n    type: RESET_CREATE_BOARD\n})\n\nexport const startCreateBoard = (board) => {\n    return async (dispatch, getState) => {\n        try {\n            const uid = getState().auth.uid\n            dispatch(createBoardBegin())\n            const boardRef = await database.ref(`users/${uid}/boards`).push({...board})\n            dispatch(createBoardSuccess(board, boardRef.key))\n        } catch (error) {\n            console.log(error)\n            dispatch(fetchBoardsError(error.message))\n        }\n    }\n}\n\nexport const fetchBoardsBegin = () => ({\n    type: FETCH_BOARDS_BEGIN\n})\n\nexport const fetchBoardsSuccess = (boardsList) => ({\n    type: FETCH_BOARDS_SUCCESS,\n    payload: boardsList\n})\n\nexport const fetchBoardsError = (error) => ({\n    type: FETCH_BOARDS_ERROR,\n    payload: error\n})\n\nexport const startFetchBoards = () => {\n    return async (dispatch, getState) => {\n        try {\n            const uid = getState().auth.uid\n            dispatch(fetchBoardsBegin())\n            const boardsSnap = await database.ref(`users/${uid}/boards`).once(\"value\")\n            \n            let boards = []\n    \n            boardsSnap.forEach((childSnapshot) => {\n                boards.push({\n                    id: childSnapshot.key,\n                    ...childSnapshot.val()\n                })\n            })\n            dispatch(fetchBoardsSuccess(boards))\n        } catch (error) {\n            console.log(error)\n            dispatch(fetchBoardsError(error.message))\n        }\n    }\n}\n\nexport const editBoardBegin = () => ({\n    type: EDIT_BOARD_BEGIN\n})\n\nexport const editBoardSuccess = (id, updates) => ({\n    type: EDIT_BOARD_SUCCESS,\n    payload: {\n        id,\n        updates\n    }\n})\n\nexport const editBoardError = (error) => ({\n    type: EDIT_BOARD_ERROR,\n    payload: error\n})\n\nexport const startEditBoard = (id, updates) => {\n    return async (dispatch, getState) => {\n        try {\n            const uid = getState().auth.uid\n            dispatch(editBoardBegin())\n            const snapshot = await database.ref(`users/${uid}/boards/${id}`).once(\"value\")\n\n            if (snapshot.exists()) {\n                await database.ref(`users/${uid}/boards/${id}`).update(updates)\n                dispatch(editBoardSuccess(id, updates)) \n            } else {\n                console.log(`Board with id ${id} not found`)\n                dispatch(editBoardError(`Board with id ${id} not found`))\n            }\n        } catch (error) {\n            console.log(error)\n            dispatch(editBoardError(error.message))\n        }\n    }\n}\n\nexport const deleteBoardBegin = () => ({\n    type: DELETE_BOARD_BEGIN\n})\n\nexport const deleteBoardSuccess = (id) => ({\n    type: DELETE_BOARD_SUCCESS,\n    payload: id\n})\n\nexport const deleteBoardError = (error) => ({\n    type: DELETE_BOARD_ERROR,\n    payload: error\n})\n\nexport const resetDeleteBoard = () => ({\n    type: RESET_DELETE_BOARD\n})\n\n// this will also remove assigned notes\nexport const startDeleteBoard = (id) => {\n    return async (dispatch, getState) => {\n        try {\n            var uid = getState().auth.uid\n            dispatch(deleteBoardBegin())\n            await database.ref(`users/${uid}/boards/${id}`).remove()\n            dispatch(deleteBoardSuccess(id))\n        } catch (error) {\n            console.log(error)\n            dispatch(deleteBoardError(error.message))\n        }\n\n        // deleted board notes cleanup in db\n        try {\n            // get all notes that belongs to deleted board\n            const notesSnap = await database.ref(`users/${uid}/notes`).orderByChild(\"board\").equalTo(id).once(\"value\")\n            \n            // remove notes\n            notesSnap.forEach(childSnapshot => { database.ref(`users/${uid}/notes/${childSnapshot.key}`).remove() })\n        } catch (error) {\n            console.log(error)\n            // to think on what we can do in such case - no problem for app itself, just messy database\n        }\n    }\n}","export const FETCH_BOARDS_BEGIN = \"FETCH_BOARDS_BEGIN\"\nexport const FETCH_BOARDS_SUCCESS = \"FETCH_BOARDS_SUCCESS\"\nexport const FETCH_BOARDS_ERROR = \"FETCH_BOARDS_ERROR\"\n\nexport const FETCH_BOARD_DETAILS_BEGIN = \"FETCH_BOARD_DETAILS_BEGIN\"\nexport const FETCH_BOARD_DETAILS_SUCCESS = \"FETCH_BOARD_DETAILS_SUCCESS\"\nexport const FETCH_BOARD_DETAILS_ERROR = \"FETCH_BOARD_DETAILS_ERROR\"\nexport const RESET_FETCH_BOARD_DETAILS = \"RESET_FETCH_BOARD_DETAILS\"\n\nexport const CREATE_BOARD_BEGIN = \"CREATE_BOARD_BEGIN\"\nexport const CREATE_BOARD_SUCCESS = \"CREATE_BOARD_SUCCESS\"\nexport const CREATE_BOARD_ERROR = \"CREATE_BOARD_ERROR\"\nexport const RESET_CREATE_BOARD = \"RESET_CREATE_BOARD\"\n\nexport const EDIT_BOARD_BEGIN = \"EDIT_BOARD_BEGIN\"\nexport const EDIT_BOARD_SUCCESS = \"EDIT_BOARD_SUCCESS\"\nexport const EDIT_BOARD_ERROR = \"EDIT_BOARD_ERROR\"\n\nexport const DELETE_BOARD_BEGIN = \"DELETE_BOARD_BEGIN\"\nexport const DELETE_BOARD_SUCCESS = \"DELETE_BOARD_SUCCESS\"\nexport const DELETE_BOARD_ERROR = \"DELETE_BOARD_ERROR\"\nexport const RESET_DELETE_BOARD = \"RESET_DELETE_BOARD\"\n\nexport const SET_CURRENT_BOARD = \"SET_CURRENT_BOARD\"","import React, { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport history from '../history'\nimport { startCreateBoard } from \"../actions/boards\"\n\nconst BoardForm = () => {\n    const [boardName, setBoardName] = useState(\"\")\n    const [error, setError] = useState(\"\")\n\n    const boardCreate = useSelector(state => state.boardCreate)\n    const { board: createdBoard, success: boardCreateSuccess, error: boardCreateError } = boardCreate\n\n    const dispatch = useDispatch()\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault()\n        setError(\"\")\n        if (!boardName.trim()) {\n            setError(\"board name can't be empty\")\n        } else {\n            dispatch(startCreateBoard({ name: boardName }))\n            setBoardName(\"\")\n        }\n    }\n\n    const handleOnChange = (e) => {\n        setBoardName(e.target.value)\n    }\n    \n    useEffect(() => {\n        boardCreateSuccess && history.push(`/boards/${createdBoard.id}`)\n    }, [boardCreateSuccess])\n\n    return (\n        <div>\n            <form onSubmit={handleOnSubmit}>\n                {error && <p>{error}</p>}\n                <input type=\"text\" placeholder=\"Board Name\" onChange={handleOnChange} value={boardName}></input>\n                <button>Create</button>\n            </form>\n        </div>\n    )\n}\n\nexport default BoardForm","import React from \"react\"\n\nconst Board = ({board}) => {\n\n    return (\n        <>\n            <h3>{board.name}</h3>\n        </>\n    )\n}\n\nexport default Board","import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\nimport BoardCard from \"./BoardCard\"\nimport { startFetchBoards } from \"../actions/boards\"\n// import { startFetchBoards, setCurrentBoard } from \"../actions/boards\"\n\nconst BoardsList = () => {\n    const dispatch = useDispatch()\n\n    const boardsList = useSelector(state => state.boardsList)\n    const { loading: boardsListLoading, boards, error: boardsListError } = boardsList\n\n    const boardCreate = useSelector(state => state.boardCreate)\n    const { success: successCreate } = boardCreate\n\n    useEffect(() => {\n        dispatch(startFetchBoards())\n    }, [successCreate]) // move fetch to page\n\n    return (\n\n        <div className=\"boardsList\">\n            {\n                boardsListLoading ? <div>Loading...</div> :\n                boards.length === 0 ? <div>No boards</div> :\n                \n                boards.map((board) => {\n                    return (\n                    // <Link to={board.id} key={board.id} onClick={() => setCurrentBoard(board)}>\n                    <div className=\"boardsList__boardCard\" key={board.id}>   \n                        <Link className=\"boardCard__link\" to={\"/boards/\" + board.id} >   \n                            <BoardCard board={board}/>\n                        </Link>\n                    </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default BoardsList","import { firebase, googleAuthProvider} from \"../firebase/firebase\"\nimport { LOGIN_BEGIN, LOGIN_SUCCESS, LOGIN_ERROR } from \"../constants/authConstants\"\n\nexport const loginBegin = () => ({\n    type: LOGIN_BEGIN\n})\n\nexport const loginSuccess = (uid, displayName, photoURL) => ({\n    type: LOGIN_SUCCESS,\n    payload: { \n        displayName,\n        photoURL,\n        uid\n    }\n})\n\nexport const loginError = (error) => ({\n    type: LOGIN_ERROR,\n    payload: error\n})\n\nexport const startLogin = () => {\n    return async dispatch => { \n        try {\n            dispatch(loginBegin())\n            // dispatch success will be triggered in index\n            await firebase.auth().signInWithPopup(googleAuthProvider)\n            // .then((user) => dispatch(loginSuccess(user.uid, user.displayName)))\n        } catch (error) {\n            dispatch(loginError(error.message))\n        }\n        \n    }\n}\n\nexport const logout = () => ({\n    type: \"LOGOUT\"\n})\n\nexport const startLogout = () => (\n    () => {\n        return firebase.auth().signOut()\n    }\n)","import React from \"react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { startLogout } from \"../actions/auth\"\n\nconst Header = () => {\n    const dispatch = useDispatch()\n    const auth = useSelector(state => state.auth)\n\n    const { displayName, photoURL } = auth\n    return (\n        <header>\n            <div className=\"header__logo\">\n                <i className=\"fa fa-sticky-note-o\"></i>\n                <strong className=\"header__appName\">Notes.</strong>\n            </div>\n            <div className=\"header__userArea\">\n                    <img className=\"header__photo\" src={photoURL} />\n                    <div className=\"header__userName\">\n                        <div>Hello, <strong>{displayName}</strong></div>\n                        <button onClick={() => dispatch(startLogout())}>Logout</button>\n                    </div>\n                    \n                    \n                    {/* <i className=\"fa fa-caret-down\" aria-hidden=\"true\"></i> */}\n\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import React, { useEffect } from \"react\"\nimport BoardForm from \"./BoardForm\"\nimport BoardList from \"./BoardsList\"\nimport Header from \"./Header\"\nimport { startCreateBoard, startFetchBoards, resetCreateBoard } from \"../actions/boards\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst BoardsPage = (props) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        return () => {\n            dispatch(resetCreateBoard())\n        }\n    }, [])\n// MOVE START CREATE BOARD TO BOARD FORM\n    return (\n        <div className=\"container__boardsPage\">\n            <BoardForm onSubmit={(board) => dispatch(startCreateBoard(board))}/>\n            <BoardList />\n        </div>\n    )\n}\n\nexport default BoardsPage","import React, { useState } from \"react\"\n\n//decide if should be te same as board form or not\nconst BoardEditForm = ({ onSubmit, board }) => {\n\n    const [boardName, setBoardName] = useState(board.name)\n    const [error, setError] = useState(\"\")\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault()\n        setError(\"\")\n        if (!boardName.trim()) {\n            setError(\"board name can't be empty\")\n        } else {\n            onSubmit({ name: boardName })\n            setBoardName(\"\")\n        }\n    }\n\n    const handleOnChange = (e) => {\n        setBoardName(e.target.value)\n    }\n\n    return (\n        <div>\n            <form className=\"form--boardEdit\" onSubmit={handleOnSubmit}>\n                {error && <p>{error}</p>}\n                <input type=\"text\" placeholder=\"Board Name\" onChange={handleOnChange} value={boardName}></input>\n                <button className=\"btnIcon\">\n                    <i className=\"fa fa-floppy-o\"></i>\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default BoardEditForm","import React, { useState, useContext } from \"react\"\nimport BoardEditForm from \"./BoardEditForm\"\nimport BoardsContext from \"../context/boards-context\"\nimport { startEditBoard, startDeleteBoard } from \"../actions/boards\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst BoardHeader = () => {\n    const [editMode, setEditMode] = useState(false)\n    \n    const dispatch = useDispatch()\n    const boardDetails = useSelector(state => state.boardDetails)\n    const { board } = boardDetails\n    const boardEdit = useSelector(state => state.boardEdit)\n    const { success: boardEditSuccess, loading: boardEditLoading, error: boardEditError } = boardEdit\n\n    const onSubmit = (boardUpdate) => {\n        dispatch(startEditBoard(board.id, boardUpdate))\n        setEditMode(false)\n        // board.name = boardUpdate.name\n    }\n\n    // handleOnDelete // push history back to the main page, delete all notes that were attached - create action delete notes where board = board.id\n\n    return (\n        <div className=\"boardHeader\">\n            {/* replace with loader */}\n            \n            { boardEditError && <p>Board Edit Error: {boardEditError}</p> }\n            {editMode ? \n            <BoardEditForm board={board} onSubmit={onSubmit} /> :\n                <>\n                    <h1>\n                        {board.name}\n                    </h1>\n                    <div className=\"boardHeader__buttons\">\n                        <button className=\"btnIcon btnIcon--boardHeader\" onClick={() => setEditMode(true)}>\n                            <i className=\"fa fa-pencil\"></i>\n                        </button>\n                        <button className=\"btnIcon btnIcon--boardHeader\" onClick={() => dispatch(startDeleteBoard(board.id))}>\n                            <i className=\"fa fa-trash-o\"></i>\n                        </button>\n                        { boardEditLoading && <img className=\"loader\" src=\"/images/loader.gif\" /> }\n                    </div>\n\n                </>\n            }\n        </div>\n    )\n}\n\nexport default BoardHeader","import React from \"react\"\n\nconst BoardsContext = React.createContext()\n\nexport { BoardsContext as default }","import React, { useState, useEffect, useCallback } from \"react\"\nimport { GithubPicker } from 'react-color'\n\nconst NoteForm = ({ note, onSubmit, changeBackgroundColor }) => {\n\n    const [title, setTitle] = useState(note ? note.title : \"\")\n    const [body, setBody] = useState(note ? note.body : \"\")\n    \n    const [showColorPicker, setShowColorPicker] = useState(false)\n\n    // colors and styles are shared between NotesStack and EditNoteForm - useContext? Props? Global variable?\n    const colors = ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', \n    '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB']\n\n    const popover = {\n        position: 'absolute',\n        zIndex: '2',\n    }\n\n    const cover = {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px',\n    }\n\n    const handleOnClick = () => {\n        setShowColorPicker(!showColorPicker)\n    }\n\n    const handleHideColorPicker= () => {\n        setShowColorPicker(false)\n    }\n\n    // it should hide picker when clicked outside of the element\n    const handleClickOutsidePicker = useCallback((e) => {\n        const pickerPopover = document.getElementById('popoverPicker')\n        \n        // if picker is present and clicked element is not inside popover - hide picker\n        pickerPopover && !pickerPopover.contains(e.target) && setShowColorPicker(false)\n    }, [])\n\n    useEffect(() => {\n        document.body.addEventListener('click', handleClickOutsidePicker)\n\n        return () => document.body.removeEventListener('click', handleClickOutsidePicker)\n    }, [])\n\n    const handleOnColorChangeComplete = (color) => {\n        changeBackgroundColor(color.hex)\n        setShowColorPicker(false)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        onSubmit({ title, body, })\n        setTitle(\"\")\n        setBody(\"\")\n    }\n\n    return (\n        <div >\n            <form className=\"cancelDrag\" onSubmit={handleSubmit}>\n                \n                <input type=\"text\" onChange={(e) => setTitle(e.target.value)} value={title}/>\n                <textarea onChange={(e) => setBody(e.target.value)} value={body}></textarea>\n                <button type=\"submit\">Save</button>\n                <div>\n                    <button type=\"button\" className=\"cancelDrag\" onClick={handleOnClick}>Pick Color</button>\n                    { showColorPicker ? \n                    <div id=\"popoverPicker\" className=\"cancelDrag\" style={ popover }>\n                        <div id=\"pickerContainer\" className=\"cancelDrag\" onClick={handleHideColorPicker} style={ cover } />\n                        <GithubPicker className=\"cancelDrag\" colors={colors} onChangeComplete={handleOnColorChangeComplete}/>\n                    </div>: null }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default NoteForm","import database from \"../firebase/firebase\"\nimport { FETCH_NOTES_BEGIN, FETCH_NOTES_SUCCESS, FETCH_NOTES_ERROR, FETCH_NOTE_DETAILS_BEGIN, FETCH_NOTE_DETAILS_SUCCESS, FETCH_NOTE_DETAILS_ERROR, RESET_FETCH_NOTES, CREATE_NOTE_SUCCESS, CREATE_NOTE_ERROR, RESET_CREATE_NOTE, DELETE_NOTE_BEGIN, DELETE_NOTE_SUCCESS, DELETE_NOTE_ERROR, RESET_DELETE_NOTE, EDIT_NOTE_BEGIN, EDIT_NOTE_SUCCESS, EDIT_NOTE_ERROR, CREATE_NOTE_BEGIN, RESET_EDIT_NOTE } from \"../constants/notesConstants\"\n\n/* NOTES FETCH */\n\nexport const fetchNotesBegin = () => ({\n    type: FETCH_NOTES_BEGIN\n})\n\nexport const fetchNotesSuccess = (notesList) => ({\n    type: FETCH_NOTES_SUCCESS,\n    payload: notesList\n})\n\nexport const fetchNotesError = (error) => ({\n    type: FETCH_NOTES_ERROR,\n    payload: error\n})\n\nexport const startFetchNotes = (boardId) => {\n    return async (dispatch, getState) => {\n        try {\n            var uid = getState().auth.uid\n            dispatch(fetchNotesBegin())\n\n            let notes = []\n    \n            const notesSnapshot = \n                await database.ref(`users/${uid}/notes`).orderByChild(\"board\").equalTo(boardId).once(\"value\")\n            \n            notesSnapshot.forEach(childSnapshot => {\n                notes.push({\n                    id: childSnapshot.key,\n                    ...childSnapshot.val()\n                })\n            })\n    \n            dispatch(fetchNotesSuccess(notes))\n        } catch (error) {\n            console.log(error)\n            dispatch(fetchNotesError(error.message))\n        }\n        \n    }\n}\n\nexport const resetNotesList = () => ({\n    type: RESET_FETCH_NOTES\n})\n\n// * NOTE CREATE * //\n\n// on begin create a placeholder note\nexport const createNoteBegin = (note) => ({\n    type: CREATE_NOTE_BEGIN,\n    payload: {\n        id: \"temp\",\n        ...note\n    }\n})\n\nexport const createNoteSuccess = (note, noteId, boardId) => ({ //CREATE boardId inside of the component\n    type: CREATE_NOTE_SUCCESS,\n    payload: {\n        id: noteId,\n        board: boardId,\n        ...note\n    }\n})\n\nexport const createNoteError = () => ({\n    type: CREATE_NOTE_ERROR\n})\n\nexport const resetCreateNote = () => ({\n    type: RESET_CREATE_NOTE\n})\n\nexport const startCreateNote = (note, boardId) => {\n    return async (dispatch, getState) => {\n        try {\n            var uid = getState().auth.uid\n            dispatch(createNoteBegin(note))\n\n            const newNote = {\n                board: boardId,\n                ...note\n            }\n    \n            const noteRef = await database.ref(`users/${uid}/notes`).push({...newNote})\n            dispatch(createNoteSuccess(newNote, noteRef.key, boardId))\n        } catch (error) {\n            console.log(error)\n            dispatch(createNoteError(error.message))\n        }\n    }\n}\n\n// * NOTE DELETE * //\n\nexport const deleteNoteBegin = () => ({\n    type: DELETE_NOTE_BEGIN\n})\n\nexport const deleteNoteSuccess = (id) => ({\n    type: DELETE_NOTE_SUCCESS,\n    payload: id\n})\n\nexport const deleteNoteError = () => ({\n    type: DELETE_NOTE_ERROR\n})\n\nexport const resetDeleteNote = () => ({\n    type: RESET_DELETE_NOTE\n})\n\nexport const startDeleteNote = (id) => {\n    return async (dispatch, getState) => {\n        try {\n            var uid = getState().auth.uid\n            dispatch(deleteNoteBegin())\n            await database.ref(`users/${uid}/notes/${id}`).remove()\n            dispatch(deleteNoteSuccess(id))\n        } catch (error) {\n            console.log(error)\n            dispatch(deleteNoteError(error.message))\n        }\n    }\n}\n\n/* NOTE EDIT */\n\nexport const editNoteBegin = () => ({\n    type: EDIT_NOTE_BEGIN\n})\n\nexport const editNoteSucess = (id, updates) => ({\n    type: EDIT_NOTE_SUCCESS,\n    payload: {\n        id,\n        updates\n    }\n})\n\nexport const editNoteError = () => ({\n    type: EDIT_NOTE_ERROR\n})\n\nexport const resetEditNote = () => ({\n    type: RESET_EDIT_NOTE\n})\n\nexport const startEditNote = (id, updates) => {\n    return async (dispatch, getState) => {\n        try {\n            var uid = getState().auth.uid\n            dispatch(editNoteBegin())\n            await database.ref(`users/${uid}/notes/${id}`).update(updates)\n            dispatch(editNoteSucess(id, updates)) // jebany handling nie dziala\n        } catch (error) {\n            console.log(error)\n            dispatch(editNoteError(error.message))\n        }\n    }\n}\n\nexport const resetNotesReducers = () => {\n    return dispatch => {\n        dispatch(resetCreateNote())\n        dispatch(resetEditNote())\n        dispatch(resetDeleteNote())\n        dispatch(resetNotesList())\n    }\n}","export const CREATE_NOTE_BEGIN = \"CREATE_NOTE_BEGIN\"\nexport const CREATE_NOTE_SUCCESS = \"CREATE_NOTE_SUCCESS\"\nexport const CREATE_NOTE_ERROR = \"CREATE_NOTE_ERROR\"\nexport const RESET_CREATE_NOTE = \"RESET_CREATE_NOTE\"\n\nexport const DELETE_NOTE_BEGIN = \"DELETE_NOTE_BEGIN\"\nexport const DELETE_NOTE_SUCCESS = \"DELETE_NOTE_SUCCESS\"\nexport const DELETE_NOTE_ERROR = \"DELETE_NOTE_ERROR\"\nexport const RESET_DELETE_NOTE = \"RESET_DELETE_NOTE\"\n\nexport const EDIT_NOTE_BEGIN = \"EDIT_NOTE_BEGIN\"\nexport const EDIT_NOTE_SUCCESS = \"EDIT_NOTE_SUCCESS\"\nexport const EDIT_NOTE_ERROR = \"EDIT_NOTE_ERROR\"\nexport const RESET_EDIT_NOTE = \"RESET_EDIT_NOTE\"\n\nexport const FETCH_NOTES_BEGIN = \"FETCH_NOTES_BEGIN\"\nexport const FETCH_NOTES_SUCCESS = \"FETCH_NOTES_SUCCESS\"\nexport const FETCH_NOTES_ERROR = \"FETCH_NOTES_ERROR\"\nexport const RESET_FETCH_NOTES = \"RESET_FETCH_NOTES\"\n\nexport const FETCH_NOTE_DETAILS_BEGIN = \"FETCH_NOTE_DETAILS_BEGIN\"\nexport const FETCH_NOTE_DETAILS_SUCCESS = \"FETCH_NOTE_DETAILS_SUCCESS\"\nexport const FETCH_NOTE_DETAILS_ERROR = \"FETCH_NOTE_DETAILS_ERROR\"","import React, { useState, useContext, useEffect, useRef } from \"react\"\nimport Draggable from 'react-draggable'\nimport { ResizableBox } from \"react-resizable\"\nimport { Rnd } from \"react-rnd\"\nimport EditNoteForm from \"./EditNoteForm\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { startEditNote, startDeleteNote } from \"../actions/notes\"\nimport \"./note.css\"\n\n// maybe put note size to env\n\nconst Note = ({ note }) => {\n    const noteDelete = useSelector(state => state.noteDelete)\n    const { loading: loadingDelete, noteId: deleteNoteId, error: errorDelete, success: successDelete} = noteDelete\n\n    const [editMode, setEditMode] = useState(false)\n    const [deleting, setDeleting] = useState(false)\n\n    const [backgroundColor, setBackgroundColor] = useState(note.backgroundColor) // add some fallback?\n    const [position, setPosition] = useState({ x: note.position.x, y: note.position.y })\n\n    const [size, setSize] = useState({ width: note.size.width ? note.size.width : 200, \n                                    height: note.size.height ? note.size.height : 200})\n    const [flagged, setFlagged] = useState(note.flagged ? note.flagged : false)\n\n    const dispatch = useDispatch()\n    \n    const onSubmit = (noteUpdate) => {\n        // store backgroundColor as state in EditForm and pass it together? But we have to pass it to Note anywas so not sure\n        dispatch(startEditNote(note.id, { ...noteUpdate, backgroundColor } )) \n        setEditMode(false)\n    } \n\n    const handleDelete = (noteId) => {\n        setDeleting(true)\n        dispatch(startDeleteNote(noteId))\n        // on error set deleting to false and display error on the page component or somewhere here\n    }\n\n    const handleOnDragStop = (e, d) => {\n        // change position only if it was moved by at least 0.5\n        if (Math.abs(position.x - d.x) > 0.5 || Math.abs(position.y - d.y) > 0.5) {\n            setPosition({ x: d.x, y: d.y })\n\n            dispatch(startEditNote(note.id, {\n                position: {x: d.x, y: d.y}\n            }))\n        }\n    }\n\n    const handleOnResize = (ref) => {\n        setSize({ width: ref.offsetWidth, height: ref.offsetHeight })\n\n        dispatch(startEditNote(note.id, {\n            size: { width: ref.offsetWidth, height: ref.offsetHeight }\n        }))\n    }\n\n    const handleOnClickFlag = () => {\n        setFlagged(!flagged)\n\n        dispatch(startEditNote(note.id, { flagged: !flagged }))\n    }\n\n    const handleColorChange = (color) => {\n        setBackgroundColor(color)\n    }\n\n    return (\n        <Rnd position={{ x: position.x, y: position.y}}\n            bounds=\"body\"\n            cancel=\".cancelDrag\"\n            minWidth={150} minHeight={150}\n            size={{ width: size.width, height: size.height}}\n            onDragStop={(e, d) => handleOnDragStop(e, d)}\n            onResize={(e, direction, ref) => handleOnResize(ref)}\n            style={{backgroundColor}}\n        >\n            <div className=\"note\">\n                {editMode ? <EditNoteForm note={note} changeBackgroundColor={handleColorChange} onSubmit={onSubmit} /> :\n                <>\n                    <div className=\"note-content\">\n                        <h3 className=\"note-header\">\n                            { note.title }\n                        </h3>\n                        <p className=\"note-body\">\n                            { note.body }\n                        </p>\n                    </div>\n\n                    <div className=\"note__buttons\">\n                        <button className=\"btnIcon cancelDrag\" onClick={() => setEditMode(true)}>\n                            <i className=\"fa fa-pencil\"></i>\n                        </button>\n                        <button className=\"btnIcon cancelDrag\" onClick={() => handleDelete(note.id)}>\n                            { deleting ? <img className=\"loader\" src=\"/images/loader.gif\" /> : <i className=\"fa fa-trash-o\"></i>}\n                        </button>\n                        <button className=\"btnIcon cancelDrag\" onClick={() => handleOnClickFlag()}>\n                            {\n                                flagged ? \n                                <i className=\"fa fa-star\" aria-hidden=\"true\"></i> :\n                                <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                            }\n                        </button>\n                    </div>\n                </>\n                }\n            </div>\n        </Rnd>\n    )\n}\n\nexport default Note","import React, { useRef, useState, useEffect, useCallback } from \"react\"\nimport { Rnd } from \"react-rnd\"\nimport { GithubPicker } from 'react-color';\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { startCreateNote } from \"../actions/notes\"\nimport \"./note.css\"\n\nconst NoteStack = () => {\n    // const pickerContainerRef = useRef()\n\n    const boardId = useSelector(state => state.boardDetails.board.id)\n\n    const colors = ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', \n    '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB']\n\n    const [showColorPicker, setShowColorPicker] = useState(false)\n    const [initPosition, setInitPosition] = useState({ x: 0, y: 0 })\n    const [backgroundColor, setBackgroundColor] = useState(colors[2])\n\n    const width = 200\n    const height = 200\n    const size = { width, height}\n\n    const dispatch = useDispatch()\n\n    const popover = {\n        position: 'absolute',\n        zIndex: '2',\n    }\n\n    const cover = {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px',\n    }\n\n    // it should hide picker when clicked outside of the element\n    const handleClickOutsidePicker = useCallback((e) => {\n            const pickerPopover = document.getElementById('popoverPicker')\n            \n            // if picker is present and clicked element is not inside popover - hide picker\n            pickerPopover && !pickerPopover.contains(e.target) && setShowColorPicker(false)\n        }, [])\n\n    useEffect(() => {\n        document.body.addEventListener('click', handleClickOutsidePicker)\n\n        return () => document.body.removeEventListener('click', handleClickOutsidePicker)\n    }, [])\n\n    const handleOnClick = () => {\n        setShowColorPicker(!showColorPicker)\n    }\n\n    const handleHideColorPicker= () => {\n        setShowColorPicker(false)\n    }\n    \n    const handleOnColorChangeComplete = (color, event) => {\n        setBackgroundColor(color.hex)\n        setShowColorPicker(false)\n    }\n\n    const handleOnDragStop = (e, d) => {\n        // create note only if it was moved more than size of NotesStack\n        if (Math.abs(initPosition.x - d.x) > width || Math.abs(initPosition.y - d.lastY) > height) {\n            const newNote = {\n                title: \"Note Tile\",\n                body: \"Note Body\",\n                backgroundColor,\n                position: { x: d.x, y: d.y },\n                flagged: false,\n                size\n            }\n            dispatch(startCreateNote(newNote, boardId))\n        }\n    }\n\n    const handleOnDragStart = (e, d) => {\n        //get init position to compare on drag stop if note should be created\n        setInitPosition({ x: d.x, y: d.y})\n    }\n    \n    return (\n        <Rnd bounds=\"body\"\n            cancel=\".cancelDrag\"\n            enableResizing={false}\n            onDragStart={(e,d) => handleOnDragStart(e,d)}\n            onDragStop={(e, d) => handleOnDragStop(e, d)}\n            position={{x: 0, y: 0}}\n            size={size}\n            style={{backgroundColor}}\n        >\n            <div className=\"note\">\n                <p>\n                    Drag to create\n                </p>\n                <button className=\"cancelDrag\" onClick={handleOnClick}>Pick Color</button>\n                { showColorPicker ? \n                <div id=\"popoverPicker\" className=\"cancelDrag\" style={ popover }>\n                    <div id=\"pickerContainer\" className=\"cancelDrag\" onClick={handleHideColorPicker} style={ cover } />\n                    <GithubPicker className=\"cancelDrag\" colors={colors} onChangeComplete={handleOnColorChangeComplete}/>\n                </div>: \n                null }\n            </div>\n        </Rnd>\n    )}\n        // extract button to separate component?\n\nexport default NoteStack","import React from \"react\"\n\nconst NotesContext = React.createContext()\n\nexport { NotesContext as default }","import React, { useContext, useEffect, useState } from \"react\"\nimport Note from \"./Note\"\nimport NotesContext from \"../context/notes-context\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { startFetchNotes, startCreateNote } from \"../actions/notes\"\nimport NotesStack from \"./NotesStack\"\n\nconst NotesList = () => {\n    const notesList = useSelector(state => state.notesList)\n    const { notes, loading, error} = notesList\n\n    const boardId = useSelector(state => state.boardDetails.board.id)\n\n    const dispatch = useDispatch()\n\n    const createNote = () => {\n        const newNote = {\n            title: \"Note Tile\",\n            body: \"Note Body\",\n            position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n            }\n        }\n        dispatch(startCreateNote(newNote, boardId))\n    }\n\n    return (\n        <div>\n            <div>\n                {notes.map((note) => (\n                    <Note key={note.id} note={note} />\n                ))}\n            </div>\n            <NotesStack />\n            {/* add below for mobile */}\n            {/* <button onClick={createNote}>Create New Note</button> */}\n            \n        </div>\n    )\n}\n// wyjebac przekazywanie boardid\nexport default NotesList","import React, { useEffect } from \"react\"\nimport history from \"../history\"\nimport BoardHeader from \"./BoardHeader\"\nimport NotesList from \"./NotesList\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { resetNotesList, startFetchNotes, resetCreateNote, resetNotesReducers } from \"../actions/notes\"\nimport { startFetchBoardDetails, resetDeleteBoard, resetFetchBoardDetails } from \"../actions/boards\"\nimport selectBoard from \"../selectors/boards\"\nimport { Link } from \"react-router-dom\"\n\n// const BoardPage = ({ notesActions, boardsActions, notesLoading, notes, boardsList, currentBoard, match }) => {\nconst BoardPage = (props) => {\n    const boardId = props.match.params.id\n    const dispatch = useDispatch()\n    const boardDetails = useSelector(state => state.boardDetails)\n    const boardDelete = useSelector(state => state.boardDelete)\n    const notesList = useSelector(state => state.notesList)\n    const { loading: loadingBoardDetails, board: currentBoard, error: errorBoardDetails, success: successBoardDetails} = boardDetails\n    const { loading: loadingNotes, error: errorNotes } = notesList\n    const { loading: loadingBoardDelete, error: errorBoardDelete, success: successBoardDelete} = boardDelete\n\n    useEffect(() => {\n        dispatch(startFetchBoardDetails(boardId))\n        dispatch(startFetchNotes(boardId))\n        return () => {\n            dispatch(resetNotesReducers())\n            dispatch(resetFetchBoardDetails())\n        }\n    }, [])\n\n    useEffect(() => {\n        if (successBoardDelete) {\n            dispatch(resetDeleteBoard())\n            history.push(\"/boards\")\n        }    \n    }, [successBoardDelete])\n\n    // moze wystarczy pchnac props do Board Header z nazwa\n    return (\n        <div>\n            <Link to=\"/boards\">Back to Main</Link>\n                {\n                    loadingBoardDetails || loadingNotes ? <p>Loading</p> :\n                    errorBoardDetails ? <p>Error Board Loading : {errorBoardDetails} </p> :\n                    errorNotes ? <p>{currentBoard.name} - Failed to Load Notes</p> :\n                    <>\n                        <BoardHeader />\n                        <NotesList />\n                    </>\n                }\n            {/* <NotesContext.Provider value={{ notesActions, notes, boardId }}> \n                <NotesList />\n                <NoteForm onSubmit={onSubmit}/> \n            </NotesContext.Provider> */}\n        </div>\n    )\n}\n\nexport default BoardPage","import React, { useCallback } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { startLogin, startLogout } from \"../actions/auth\"\n\nconst LoginPage = () => {\n    const dispatch = useDispatch()\n\n    const auth = useSelector(state => state.auth)\n    const { error: authError } = auth\n    \n\n    const handleLogin = () => dispatch(startLogin())\n    \n    return (\n        <div>\n            <div>{authError ? authError : \"No error\"}</div>\n            <div>\n                <button onClick={handleLogin}>Login with Google</button>\n                <button onClick={() => dispatch(startLogout())}>Logout</button>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default LoginPage","export const LOGIN_BEGIN = \"LOGIN_BEGIN\"\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\nexport const LOGIN_ERROR = \"LOGIN_ERROR\"\nexport const RESET_LOGIN = \"RESET_LOGIN\"\n\nexport const LOGOUT_BEGIN = \"LOGOUT_BEGIN\"\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\"\nexport const LOGOUT_ERROR = \"LOGOUT_ERROR\"\nexport const RESET_LOGOUT = \"RESET_LOGOUT\"","import React, { useEffect } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport Header from \"../components/Header\"\n\nexport const PrivateRoute = ({\n    component: Component,\n    ...rest\n}) => {\n    const auth = useSelector(state => state.auth)\n    const { uid, loading } = auth\n    const isAuthenticated = !!uid\n    // console.log(isAuthenticated)\n    return (\n        <Route {...rest} component={(props) => (\n            isAuthenticated ? (\n                <div>\n                    <Header/>\n                    <div className=\"content-container\">\n                        <Component {...props} />\n                    </div>\n                </div>\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        )}/>\n    )\n}\n\n\nexport default PrivateRoute","import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { useSelector } from \"react-redux\"\n\nexport const PublicRoute = ({ \n    component: Component,\n    ...rest\n}) => {\n    const isAuthenticated = useSelector(state => state.auth.uid)\n\n    return (\n        <Route {...rest} component={(props) => (\n            isAuthenticated ? (\n                <Redirect to=\"/boards\" />\n            ) : (\n                <Component {...props} />\n            )\n        )}/>\n    )\n}\n\nexport default PublicRoute","import React from \"react\"\nimport { Router, Route, Switch } from \"react-router-dom\"\nimport history from \"../history\"\nimport BoardsListPage from \"../components/BoardsListPage\"\nimport BoardPage from \"../components/BoardPage\"\nimport LoginPage from \"../components/LoginPage\"\nimport PrivateRoute from \"./PrivateRoute\"\nimport PublicRoute from \"./PublicRoute\"\n\n\nconst AppRouter = () => (\n    <Router history={history}>\n        <div>\n            <Switch>\n                <PublicRoute path=\"/\" component={LoginPage} exact={true}/>\n                <PrivateRoute path=\"/boards\" component={BoardsListPage} exact={true}/>\n                <PrivateRoute path=\"/boards/:id\" component={BoardPage}/>\n                {/* <Route component={<p>404</p>} /> */}\n            </Switch>\n        </div>\n    </Router>\n)\n\nexport default AppRouter","import { LOGIN_SUCCESS, LOGIN_BEGIN, LOGIN_ERROR } from \"../constants/authConstants\"\n\n// currently BEGIN are not used\nconst authReducer = (state = {}, action) => {\n    switch (action.type) {\n        case LOGIN_BEGIN:\n            return {\n                loading: true\n            }\n        case LOGIN_SUCCESS:\n            return {\n                loading: false,\n                displayName: action.payload.displayName,\n                uid: action.payload.uid,\n                photoURL: action.payload.photoURL,\n                success: true\n            }\n        case LOGIN_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case \"LOGOUT\":\n            return {}\n        default:\n            return state\n    }\n}\n\nexport default authReducer","import { applyMiddleware, createStore, combineReducers, compose } from 'redux'\nimport { persistStore, persistReducer } from \"redux-persist\"\nimport storage from 'redux-persist/lib/storage'\nimport thunk from \"redux-thunk\"\nimport authReducer from \"../reducers/auth\"\nimport { notesListReducer, noteCreateReducer, noteEditReducer, noteDeleteReducer } from \"../reducers/notes\"\nimport { boardEditReducer, boardsListReducer, boardCreateReducer, boardDetailsReducer, boardDeleteReducer } from \"../reducers/boards\"\n\nconst composeEnhancers = \n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 }) :\n    compose\n    \n// const composeEnhancers = compose\n\nconst persistConfig = {\n    key: \"root\",\n    storage\n}\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    notesList: notesListReducer,\n    noteCreate: noteCreateReducer,\n    noteEdit: noteEditReducer,\n    noteDelete: noteDeleteReducer,\n    boardDetails: boardDetailsReducer,\n    boardsList: boardsListReducer,\n    boardCreate: boardCreateReducer,\n    boardEdit: boardEditReducer,\n    boardDelete: boardDeleteReducer\n})\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default () => {\n    // let store = createStore(persistedReducer, composeEnhancers(applyMiddleware(thunk)))\n    let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n    // let persistor = persistStore(store)\n    // return { store, persistor }\n    return { store }\n}\n","// import { combineReducers } from \"redux\"\n\nimport { FETCH_NOTES_BEGIN, FETCH_NOTES_SUCCESS, FETCH_NOTES_ERROR, FETCH_NOTE_DETAILS_BEGIN, FETCH_NOTE_DETAILS_SUCCESS, FETCH_NOTE_DETAILS_ERROR, RESET_FETCH_NOTES, CREATE_NOTE_SUCCESS, CREATE_NOTE_ERROR, RESET_CREATE_NOTE, DELETE_NOTE_BEGIN, DELETE_NOTE_SUCCESS, DELETE_NOTE_ERROR, RESET_DELETE_NOTE, EDIT_NOTE_BEGIN, EDIT_NOTE_SUCCESS, EDIT_NOTE_ERROR, CREATE_NOTE_BEGIN, RESET_EDIT_NOTE } from \"../constants/notesConstants\"\n\n// id for placeholder note (until success is dispatched)\nconst tempNoteId = \"temp\"\n\nconst initialState = {\n    notesList: [],\n    loading: false,\n    error: null\n}\n\nconst notesListReducer = (state = { notes: [], loading: false, error: null }, action) => {\n    switch(action.type) { \n        case FETCH_NOTES_BEGIN:\n            return {\n                loading: true\n            }\n        case FETCH_NOTES_SUCCESS:\n            return {\n                loading: false,\n                notes: action.payload,\n                success: true\n            }\n        case FETCH_NOTES_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_FETCH_NOTES:\n            return {\n                notes: [],\n                loading: false,\n                error: null,\n            }\n        case CREATE_NOTE_BEGIN:\n            return {\n                ...state,\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ]\n            }\n        case CREATE_NOTE_SUCCESS:\n            // remove placeholder note\n            const filteredNotes = state.notes.filter(note => note.id !== tempNoteId )\n            return {\n                ...state,\n                notes: [\n                    ...filteredNotes,\n                    action.payload\n                ]\n            }\n        // on create note error delete? notification?\n        case EDIT_NOTE_SUCCESS:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.id) {\n                        return {\n                            ...note,\n                            ...action.payload.updates\n                        } \n                    } else {\n                        return note\n                    }\n                })\n            }\n        case DELETE_NOTE_SUCCESS:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => {\n                    return note.id !== action.payload\n                })\n            }\n        default:\n            return state\n    }\n}\n\nconst noteCreateReducer = (state = { note: {}, loading: false, error: null }, action) => {\n    switch(action.type) { \n        case CREATE_NOTE_BEGIN:\n            return {\n                loading: true\n            }\n        case CREATE_NOTE_SUCCESS:\n            return {\n                loading: false,\n                note: action.payload,\n                success: true\n            }\n        case CREATE_NOTE_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_CREATE_NOTE:\n            return {\n                note: {},\n                loading: false,\n                error: null\n            }\n        default:\n            return state\n    }\n}\n\nconst noteDeleteReducer = (state = { noteId: null, loading: false, error: null }, action) => {\n    switch(action.type) { \n        case DELETE_NOTE_BEGIN:\n            return {\n                loading: true\n            }\n        case DELETE_NOTE_SUCCESS:\n            return {\n                loading: false,\n                noteId: action.payload,\n                success: true\n            }\n        case DELETE_NOTE_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_DELETE_NOTE:\n            return {\n                noteId: null,\n                loading: false,\n                error: null\n            }\n        default:\n            return state\n    }\n}\n\nconst noteDetailsReducer = (state = { note: {}, loading: false, error: null }, action) => {\n    switch(action.type) { \n        case FETCH_NOTES_BEGIN:\n            return {\n                loading: true\n            }\n        case FETCH_NOTES_SUCCESS:\n            return {\n                loading: false,\n                note: {...action.payload},\n                success: true\n            }\n        case FETCH_NOTES_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nconst noteEditReducer = (state = { note: {}, loading: false, error: null}, action) => {\n    switch(action.type) { \n        case EDIT_NOTE_BEGIN:\n            return {\n                loading: true\n            }\n        case EDIT_NOTE_SUCCESS:\n            return {\n                loading: false,\n                note: action.payload,\n                success:true\n            }\n        case EDIT_NOTE_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_EDIT_NOTE:\n            return {\n                note: {}, loading: false, error: null\n            }\n        default:\n            return state\n        }\n}\n\n//delete below\n// export default (state = initialState, action) => {\n//     switch (action.type) {\n//         case EDIT_NOTE_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case EDIT_NOTE_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 notesList: state.notesList.map((note) => {\n//                     if (note.id === action.payload.id) {\n//                         return {\n//                             ...note,\n//                             ...action.payload.updates\n//                         } \n//                     } else {\n//                             return note\n//                     }\n//                 })\n//             }\n//         case DELETE_NOTE_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case DELETE_NOTE_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 notesList: state.notesList.filter((note) => {\n//                     return note.id !== action.payload.id\n//                 })\n//             }\n//         case FETCH_NOTES_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true,\n//                 notesList: [], //get rid of that?\n//             }\n//         case FETCH_NOTES_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 notesList: action.payload.notesList\n//             }\n//         default:\n//             return state\n//     }\n// }\n\nexport { notesListReducer, noteCreateReducer, noteEditReducer, noteDeleteReducer, noteDetailsReducer }","import { FETCH_BOARDS_BEGIN, FETCH_BOARDS_SUCCESS, FETCH_BOARDS_ERROR, SET_CURRENT_BOARD, DELETE_BOARD_BEGIN, DELETE_BOARD_SUCCESS, DELETE_BOARD_ERROR, FETCH_BOARD_DETAILS_BEGIN, FETCH_BOARD_DETAILS_SUCCESS, FETCH_BOARD_DETAILS_ERROR, RESET_DELETE_BOARD, RESET_FETCH_BOARD_DETAILS, RESET_CREATE_BOARD } from \"../constants/boardsConstants\"\nimport { CREATE_BOARD_BEGIN, CREATE_BOARD_SUCCESS, CREATE_BOARD_ERROR } from \"../constants/boardsConstants\"\nimport { EDIT_BOARD_BEGIN, EDIT_BOARD_SUCCESS, EDIT_BOARD_ERROR } from \"../constants/boardsConstants\"\n\nconst initialState = {\n    boardsList: {boards: [], loading: false, error: null},\n    activeBoard: {board: {}, loading: false, error: null},\n    newBoard: {board: {}, loading: false, error: null},\n    \n    loading: false,\n    error: null\n}\n\n// export default (state = initialState, action) => {\n//     switch (action.type) {\n//         case CREATE_BOARD_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case CREATE_BOARD_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 boardsList: [...state.boardsList, action.payload.board]\n//             }\n//         case EDIT_BOARD_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case EDIT_BOARD_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 boardsList: state.boardsList.map((board) => {\n//                     if (board.id === action.payload.id) {\n//                         return {\n//                             ...board,\n//                             ...action.payload.updates\n//                         }\n//                     } else {\n//                         return board\n//                     }\n//                 })\n//             }\n//         case DELETE_BOARD_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case DELETE_BOARD_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 boardsList: state.boardsList.filter((board) => {\n//                     return board.id !== action.payload.id\n//                 })\n//             }\n//         case FETCH_BOARDS_BEGIN:\n//             return {\n//                 ...state,\n//                 loading: true\n//             }\n//         case FETCH_BOARDS_SUCCESS:\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 boardsList: action.payload.boardsList\n//             }\n//         case SET_CURRENT_BOARD:\n//             return {\n//                 ...state,\n//                 currentBoard: action.payload.board\n//             }\n//         default:\n//             return state\n//     }\n// }\n\nconst boardDetailsReducer = (state = { board: {} }, action) => {\n    switch (action.type) {\n        case FETCH_BOARD_DETAILS_BEGIN:\n            return {\n                loading: true\n            }\n        case FETCH_BOARD_DETAILS_SUCCESS:\n            return {\n                loading: false,\n                board: action.payload,\n                success: true\n            }\n        case FETCH_BOARD_DETAILS_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_FETCH_BOARD_DETAILS:\n            return {\n                board: {}, loading: false, error: null\n            }\n        case EDIT_BOARD_SUCCESS:\n            return {\n                ...state,\n                board: {...state.board, ...action.payload.updates}\n            }\n        default:\n            return state\n        }\n}\n\nconst boardCreateReducer = (state = { board: {} }, action) => {\n    switch (action.type) {\n        case CREATE_BOARD_BEGIN:\n            return {\n                loading: true\n            }\n        case CREATE_BOARD_SUCCESS:\n            return {\n                loading: false,\n                board: action.payload,\n                success: true\n            }\n        case CREATE_BOARD_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_CREATE_BOARD:\n            return {\n                board: {}, loading: false, error: null\n            }\n        default:\n            return state\n        }\n}\n\nconst boardEditReducer = (state = { board: {}} , action) => {\n    switch(action.type) {\n        case EDIT_BOARD_BEGIN:\n            return {\n                loading: true\n            }\n        case EDIT_BOARD_SUCCESS:\n            return {\n                loading: false,\n                board: action.payload,\n                success: true\n            }\n        case EDIT_BOARD_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}\n\n// put initial states in variables\nconst boardDeleteReducer = (state = {boardId: null, loading: false, error: null}, action) => {\n    switch(action.type) {\n        case DELETE_BOARD_BEGIN:\n            return {\n                loading: true\n            }\n        case DELETE_BOARD_SUCCESS:\n            return {\n                loading: false,\n                boardId: action.payload,\n                success: true\n            }\n        case DELETE_BOARD_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case RESET_DELETE_BOARD: {\n            return {\n                boardId: null, loading: false, error: null\n            }\n        }\n        default:\n            return state\n    }\n}\n\nconst boardsListReducer = (state = { boards: [], loading: false, error: null }, action) => {\n    switch (action.type) {\n        case FETCH_BOARDS_BEGIN:\n            return {\n                loading: true,\n                boards: []\n            }\n        case FETCH_BOARDS_SUCCESS:\n            return {\n                loading: false,\n                boards: action.payload\n            }\n        case FETCH_BOARDS_ERROR:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        // INSTEAD OF BELOW - REDIRECT. TO BE DELETED\n        case CREATE_BOARD_SUCCESS:\n            return {\n                ...state,\n                boards: [...state.boards, action.payload]\n            }\n        default:\n            return state\n        }\n}\n\nexport { boardCreateReducer, boardEditReducer, boardDeleteReducer, boardsListReducer, boardDetailsReducer }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const reduxState = {\n    boards : {\n        byId : {\n            \"board1\" : {\n                id: \"board1\",\n                name: \"board first\",\n                //notes: [\"note1\", \"note2\"]\n            },\n            \"board2\" : {\n                id: \"board2\",\n                name: \"board second\",\n                //notes: [\"note3\", \"note4\"]\n            }\n        },\n    },\n    notes : {\n        byId : {\n            \"note1\" : {\n                id: \"note1\",\n                board: \"board1\",\n                title: \"bleble\",\n                body: \"ebe ebe\",\n                position: {\n                    x: Math.random() * 400,\n                    y: Math.random() * 400\n                }\n            },\n            \"note2\" : {\n                id: \"note2\",\n                board: \"board1\",\n                title: \"ebe\",\n                body: \"ebe\",\n                position: {\n                    x: Math.random() * 400,\n                    y: Math.random() * 400\n                }\n            },\n            \"note3\" : {\n                id: \"note3\",\n                board: \"board2\",\n                title: \"aha\",\n                body: \"ehe\",\n                position: {\n                    x: Math.random() * 400,\n                    y: Math.random() * 400\n                }\n            },\n            \"note4\" : {\n                id: \"note4\",\n                board: \"board2\",\n                title: \"ehe\",\n                body: \"haha\",\n                position: {\n                    x: Math.random() * 400,\n                    y: Math.random() * 400\n                }\n            }\n        }\n    }\n}\n\nexport default reduxState","import React from \"react\"\n\nconst LoadingPage = () => (\n    <div className=\"loader\">\n        <img className=\"loader__image\" src=\"/images/loader.gif\" />\n    </div>\n)\n\nexport default LoadingPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\"\nimport AppRouter from \"./routers/AppRouter\"\nimport history from \"./history\"\nimport configureStore from \"./store/configureStore\"\nimport { firebase } from \"./firebase/firebase\"\nimport { login, logout, startLogin, loginSuccess } from \"./actions/auth\"\nimport { PersistGate } from 'redux-persist/integration/react'\nimport * as serviceWorker from './serviceWorker';\nimport db from \"./fixtures/db\"\nimport LoadingPage from './components/LoadingPage';\n\nconst { store } = configureStore()\n\nconst jsx = (\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>\n)\n\nlet hasRendered = false\n\nconst renderApp = () => {\n  if(!hasRendered) {\n    ReactDOM.render(jsx, document.getElementById('root'))\n    hasRendered = true\n  }\n}\n\nReactDOM.render(<LoadingPage />, document.getElementById('root'))\n\nfirebase.auth().onAuthStateChanged((user) => {\n  console.log(user)\n  // && !!user.uid\n  if (user) {\n    store.dispatch(loginSuccess(user.uid, user.displayName, user.photoURL))\n    console.log(\"user is logged in\")\n    renderApp()\n      if(history.location.pathname === \"/\") {\n          history.push(\"/boards\")\n      }\n  } else {\n    console.log(\"user logged out or cleanup\")\n    store.dispatch(logout())\n    renderApp()\n    history.push(\"/\")\n  }\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}